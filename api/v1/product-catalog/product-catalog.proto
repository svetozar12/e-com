syntax = "proto3";

import "google/api/annotations.proto";
import "google/openapiv3/annotations.proto";

option go_package = "./product-catalog-service";

service ProducCatalogService {
    rpc GetProduct (GetProductRequest) returns (Product) {
            option (google.api.http) = {
                        get: "/v1/product-catalog/{id}",
            };
    };
    rpc GetProductList (GetProductListRequest) returns (GetProductListResponse) {
            option (google.api.http) = {
                        get: "/v1/product-catalog"
            };
    };
    rpc CreateProduct (CreateProductRequest) returns (ProductResponse) {
            option (google.api.http) = {
                        post: "/v1/product-catalog",
                        body: "*",
            };
            option (openapi.v3.operation) = {
                request_body: {
                  request_body: {
                    content: {
                      additional_properties: [
                              {
                                name: "multipart/form-data";
                                value: {
                                  schema: {
                                    reference: {
                                      _ref: "#/components/schemas/CreateProductRequest"
                                    }
                                  }
                                }
                              }
                        ]
                    }
                  }
                }
              };
    };
    rpc UpdateProduct (UpdateProductRequest) returns (ProductResponse) {
            option (google.api.http) = {
                        put: "/v1/product-catalog/{id}",
                        body: "*"
            };
            option (openapi.v3.operation) = {
                request_body: {
                  request_body: {
                    content: {
                      additional_properties: [
                              {
                                name: "multipart/form-data";
                                value: {
                                  schema: {
                                    reference: {
                                      _ref: "#/components/schemas/UpdateProductRequest"
                                    }
                                  }
                                }
                              }
                        ]
                    }
                  }
                }
              };
    };
    rpc DeleteProduct (DeleteProductRequest) returns (ProductResponse) {
            option (google.api.http) = {
                        delete: "/v1/product-catalog/{id}"
            };
    } 
};

enum Status {
        SUCCESSFUL = 0;
        FAILED = 1;
};

enum Action{
        CREATE = 0;
        UPDATE = 1;
        DELETE = 2;
};

message ProductResponse {
        Status status = 1;
        Action action = 2;
        int32 productId = 3; 
}

message Empty {}

message InventoryAvaliability {
        int32 id = 1;
        int32 value = 2;
}

message Product {
        int32 id = 1;
        string name = 2;
        int32 price = 3;
        bytes image = 4;
        string description = 5;
        bool available = 6;
        int32 weight = 7;
        InventoryAvaliability inventory = 8;
        string currency = 9;
}

// GetProduct

message GetProductRequest {
        int32 id = 1;
}

// GetProductList

message GetProductListRequest {
        int32 page = 1;
        int32 limit = 2;
}

message GetProductListResponse {
        repeated Product productList = 1;
}

// CreateProduct

message CreateProductRequest {
        int32 id = 1;
        string name = 2;
        int32 price = 3;
        bytes image = 4 [(openapi.v3.property) = {type: "string", format:"binary"}];
        string description = 5;
        bool available = 6;
        int32 weight = 7;
        InventoryAvaliability inventory = 8;
        string currency = 9;       
}

// UpdateProduct

message UpdateProductRequest {
        int32 id = 1;
        optional string name = 2;
        optional int32 price = 3;
        optional bytes image = 4 [(openapi.v3.property) = {type: "string", format:"binary"}];
        optional string description = 5;
        optional bool available = 6;
        optional int32 weight = 7;
        // optional InventoryAvaliability inventory = 8;
        optional string currency = 9;       
}

// DeleteProduct

message DeleteProductRequest {
        int32 id = 1;
}