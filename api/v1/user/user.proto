syntax = "proto3";

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "./user-service";

service UserService {
    rpc Register (RegisterRequest) returns (RegisterResponse) {
            option (google.api.http) = {
                post: "/v1/public/user",
                body: "*",
            };
    };
    rpc GetUser (GetUserRequest) returns (User) {
            option (google.api.http) = {
                get: "/v1/user/{id}"
            };
        };
    rpc UpdateUser (UpdateUserRequest) returns (User) {
            option (google.api.http) = {
                put: "/v1/user/{id}",
                body: "*"
            };
    };
    rpc DeleteUser (DeleteUserRequest) returns (User) {
            option (google.api.http) = {
                delete: "/v1/user/{id}",
            };
    };
}

service AuthenticationService {
    rpc Login (LoginRequest) returns (LoginResponse) {
            option (google.api.http) = {
                post: "/v1/public/auth",
                body: "*",
            };
    };
    rpc VerifyToken (VerifyTokenRequest) returns (VerifyTokenResponse) {
            option (google.api.http) = {
                post: "/v1/auth/verify",
                body: "*",
            };
    };
}

// User Service
message GetUserRequest {
    int32 id = 1 [(validate.rules).int32.gte = 1];
}

message DeleteUserRequest {
    int32 id = 1 [(validate.rules).int32.gte = 1];
}

message UpdateUserRequest {
    int32 id = 1 [(validate.rules).int32.gte = 1];
    string email = 2 [(validate.rules).string.email = true ,(validate.rules).string.ignore_empty = true];
    string fname = 3;
    string lname = 4;
}

message User {
    int32 id = 1 [(validate.rules).int32.gte = 1];
    string email = 2 [(validate.rules).string.email = true];
    string fname = 3;
    string lname = 4;
}

message RegisterRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string.min_len = 6];
}

message RegisterResponse {
    string accessToken = 1;
}

// Authentication Service
message LoginRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string.min_len = 6];
}

message LoginResponse {
    string accessToken = 1;
    string refreshToken = 2;
}

message VerifyTokenRequest {
    string token = 1 [(validate.rules).string.min_len = 1];
}

message VerifyTokenResponse {
    bool isValid = 1;
}

