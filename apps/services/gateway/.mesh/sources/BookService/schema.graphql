schema {
  query: Query
  mutation: Mutation
}

type Query {
  UserService_GetUser(input: GetUserRequest_Input): User
  UserService_connectivityState(tryToConnect: Boolean): ConnectivityState
  AuthenticationService_connectivityState(tryToConnect: Boolean): ConnectivityState
}

type User {
  email: String
}

"User Service"
input GetUserRequest_Input {
  id: String
}

enum ConnectivityState {
  IDLE
  CONNECTING
  READY
  TRANSIENT_FAILURE
  SHUTDOWN
}

type Mutation {
  UserService_Register(input: RegisterRequest_Input): RegisterResponse
  UserService_UpdateUser(input: UpdateUserRequest_Input): User
  UserService_DeleteUser(input: DeleteUserRequest_Input): User
  AuthenticationService_Login(input: LoginRequest_Input): LoginResponse
  AuthenticationService_VerifyToken(input: VerifyTokenRequest_Input): VerifyTokenResponse
}

type RegisterResponse {
  token: String
}

input RegisterRequest_Input {
  email: String
  password: String
}

input UpdateUserRequest_Input {
  id: String
  email: String
}

input DeleteUserRequest_Input {
  id: String
}

type LoginResponse {
  token: String
}

"Authentication Service"
input LoginRequest_Input {
  email: String
  password: String
}

type VerifyTokenResponse {
  isValid: Boolean
}

input VerifyTokenRequest_Input {
  token: String
}
